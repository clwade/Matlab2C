<Machine>           ::="MACHINE" <Id> <Includes> <Attributes> <Operations> "END”
<Includes>          ::=("INCLUDE" (<StringLit> | \<<Id>".bs"\>) ";")* 
<Attributes>        ::=("ATTRIBUTES" <Defines> <CVDefine>)?
<CVDefine>          ::=((<VarDefine> | <CstDefine> | <FunctionDefineHead>) ";")*
<VarDefine>         ::=(<Type>(<PointId> ("=" <Ele>)?)("," (<PointId> ("=" <Ele>)?))*)
			                | ("typedef" <EnumType> <Id>)
			                | ("typedef" <Type> <PointId>)
			                |	("typedef" <TupleType> <Id>)
			                |（"typedef" "struct" <Id> <PointId>）
<CstDefine>         ::="const" <Type> (<PointId> "=" <Ele>) ("," ( <PointId> "=" <Ele>))*
<FunctionDefineHead>::=<Type> <PointId> "(" <ParaDefineList> ") »
<Type>              ::=<NormalType> | <SetType> | <Id>
<PointId>           ::=("*" <PointId>) | <Id> | ("(" <PointId> ")")
<EnumType>          ::="enum" "{" ((<Id> ("=" <UnaryE>)?) ("," <Id> ("=" <UnaryE>)?)*)? "}”
<TupleType>         ::="struct" "{" ((<Type> <PointId> ";"))* "} 
<Operations>        ::= ("OPERATIONS" (<FunctionDefine>)+)?
<FunctionDefine>    ::=<Type> <PointId> "(" <ParaDefineList> ")" ("{" <ComStatement> "}")
<ParaDefineList>    ::=(<Type> <PointId> ("," <Type> <PointId>)*)?
<ComStatement>      ::=(<CVDefine>)? (<Statement>)*
<Statement>         ::=";" |	<ElementTakeS> ";" | <FunctionCall> ";" | <AssignmentS> ";"
			                | <ReturnS> ";" | <WhileS> | <IfS> | "{" (<Statement>)* "}") | <AtLit>
<ElementTakeS>      ::=<Id> (("." "<" (((<Id>) ":" <Ele>)) ("," ((<Id>) ":" <Ele>))* ">"))? ":" <MSE>
<FunctionCall>      ::=<Id> "(" <ParaValueList> ")" (<AppendParas>)?
<AssignmentS>       ::=<PointId> ("." <Id> | "->" <Id>)* "=" <Ele>
<ReturnS>           ::="return" (<Ele>)?
<WhileS>            ::="while" "(" <Ele> ")" <Statement>
<IfS>               ::="if" "(" <Ele> ")" <Statement> (("else" <Statement>))?
<ParaValueList>     ::=(<Ele> ("," <Ele>)*)?
<AppendParas>       ::="@" <Id> ("," <Id>)* "@”
<NormalType>        ::="long" "long" | "int" | "short" | "float" | "char" | "long" | "proposition" 
                      | "double" | "string" | "void" | "unsigned" "int" | "unsigned" "short" 
                      | "unsigned" "float" | "unsigned" "char" | "unsigned" "double" 
                      | "unsigned" "long" "long" | "unsigned" "long" 
<SetType>           ::="set" "<" <Type> ">" (<AtLit>)
<Ele>               ::=<AndProE> ("||" <AndProE>)*
<AndProE>           ::=<ConditionTermE> ("&&" <ConditionTermE>)*
<ConditionTermE>    ::= <ElementTakeS> | <MSE> ( ( ">" <MSE> | "<=" <MSE> | "<" <MSE> 
                      | ">=" <MSE> | "==" <MSE> | "!=" <MSE> )?
<MSE>               ::=<MSET> ("+" <MSET> | "-" <MSET> | "&" <MSET> | "|" <MSET> | ">>" <MSET> 
                      | "<<" <MSET> | "--" <MSET> )*
<MSET>              ::=<UnaryE> ("*" <UnaryE> | "/" <UnaryE> | "%" <UnaryE> | "/-\\" <UnaryE> 
                      | "\\-/" <UnaryE>)*
<UnaryE>            ::=(("+" | "-") <Term>) | <OneE>
<OneE>              ::=("~" <OneE>) | ("*" <OneE>) | ("&" <OneE>) | <Term>
<Term>              ::= ("nil" | <StringLit> | <UIntLit> | <UFloatLit> | <CharLit> | <TrueLit> 
                      | <FalseLit> | ("{" (<Ele> ("," <Ele>)*)? "}") (AtLit)?
                      | "(" <Type> ("*")? ")" <Ele>
                      | (("<" (<Ele> ("," <Ele>)*)? ">") | <FunctionCall> | <Id> | ("(" <Ele> ")"))
                       (("." <Id>)| ("->" <Id>))*) | "sizeof""("<Type>")"
<UIntLit>           ::=(<NZDIGIT> (<DIGIT>)*) | <ZDIGIT> | <HEX>
<UFloatLit>         ::=<UIntLit> "." (<DIGIT>)*
<AtLit>             ::="@"<Id>"@"
<CharLit>           ::="\'" (~["\'","\\","\n","\r"] | "\\" ["n","t","b","r","f","\\","\'","\""]) "\'"
<StringLit>         ::="\"" (~["\"","\\","\n","\r"] | "\\" ["n","t","b","r","f","\\","\'","\""])* "\""
<Id>                ::=<ALPHABET> <LETTER> | <ALPHABET>
<ALPHABET>          ::= "a" | "b" | "c" | ...... | "z" | "A" | "B" | "C" | ...... | "Z" | "_"
<LETTER>            ::= <ALPHABET> <LETTER> | <ALPHABET> | <DIGIT> <LETTER> | <DIGIT>
<DIGIT>             ::= <ZDIGIT> | <NZDIGIT>
<ZDIGIT>            ::= "0"
<NZDIGIT>           ::= "1" | "2" | ...... | "9"
<HEX>               ::= "0X"(DIGIT | "a" | "b" | "c" | "d" | "e" | "f")*